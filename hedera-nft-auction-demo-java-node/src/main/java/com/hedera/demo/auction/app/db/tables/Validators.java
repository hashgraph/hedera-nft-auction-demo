/*
 * This file is generated by jOOQ.
 */
package com.hedera.demo.auction.app.db.tables;


import com.hedera.demo.auction.app.db.Keys;
import com.hedera.demo.auction.app.db.Public;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Validators extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.validators</code>
     */
    public static final Validators VALIDATORS = new Validators();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.validators.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.validators.url</code>.
     */
    public final TableField<Record, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.validators.publickey</code>.
     */
    public final TableField<Record, String> PUBLICKEY = createField(DSL.name("publickey"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    private Validators(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Validators(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.validators</code> table reference
     */
    public Validators(String alias) {
        this(DSL.name(alias), VALIDATORS);
    }

    /**
     * Create an aliased <code>public.validators</code> table reference
     */
    public Validators(Name alias) {
        this(alias, VALIDATORS);
    }

    /**
     * Create a <code>public.validators</code> table reference
     */
    public Validators() {
        this(DSL.name("validators"), null);
    }

    public <O extends Record> Validators(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, VALIDATORS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.VALIDATORS_NAME_KEY);
    }

    @Override
    public Validators as(String alias) {
        return new Validators(DSL.name(alias), this);
    }

    @Override
    public Validators as(Name alias) {
        return new Validators(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Validators rename(String name) {
        return new Validators(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Validators rename(Name name) {
        return new Validators(name, null);
    }
}
