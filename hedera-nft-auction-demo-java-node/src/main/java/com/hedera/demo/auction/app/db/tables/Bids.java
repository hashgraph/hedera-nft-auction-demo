/*
 * This file is generated by jOOQ.
 */
package com.hedera.demo.auction.app.db.tables;


import com.hedera.demo.auction.app.db.Indexes;
import com.hedera.demo.auction.app.db.Keys;
import com.hedera.demo.auction.app.db.Public;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bids extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bids</code>
     */
    public static final Bids BIDS = new Bids();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.bids.timestamp</code>.
     */
    public final TableField<Record, String> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.bids.auctionid</code>.
     */
    public final TableField<Record, Integer> AUCTIONID = createField(DSL.name("auctionid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bids.bidderaccountid</code>.
     */
    public final TableField<Record, String> BIDDERACCOUNTID = createField(DSL.name("bidderaccountid"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.bidamount</code>.
     */
    public final TableField<Record, Long> BIDAMOUNT = createField(DSL.name("bidamount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bids.status</code>.
     */
    public final TableField<Record, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.refundtxid</code>.
     */
    public final TableField<Record, String> REFUNDTXID = createField(DSL.name("refundtxid"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.refundtxhash</code>.
     */
    public final TableField<Record, String> REFUNDTXHASH = createField(DSL.name("refundtxhash"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.transactionid</code>.
     */
    public final TableField<Record, String> TRANSACTIONID = createField(DSL.name("transactionid"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.transactionhash</code>.
     */
    public final TableField<Record, String> TRANSACTIONHASH = createField(DSL.name("transactionhash"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.refundstatus</code>.
     */
    public final TableField<Record, String> REFUNDSTATUS = createField(DSL.name("refundstatus"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.scheduleid</code>.
     */
    public final TableField<Record, String> SCHEDULEID = createField(DSL.name("scheduleid"), SQLDataType.CLOB.defaultValue(DSL.field("''::text", SQLDataType.CLOB)), this, "");

    private Bids(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Bids(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bids</code> table reference
     */
    public Bids(String alias) {
        this(DSL.name(alias), BIDS);
    }

    /**
     * Create an aliased <code>public.bids</code> table reference
     */
    public Bids(Name alias) {
        this(alias, BIDS);
    }

    /**
     * Create a <code>public.bids</code> table reference
     */
    public Bids() {
        this(DSL.name("bids"), null);
    }

    public <O extends Record> Bids(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, BIDS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BIDS_REFUNDSTATUS_INDEX, Indexes.BIDS_TRANSACTIONID_INDEX);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.BIDS_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.BIDS_PKEY);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.BIDS__BIDS_AUCTIONID_FKEY);
    }

    private transient Auctions _auctions;

    public Auctions auctions() {
        if (_auctions == null)
            _auctions = new Auctions(this, Keys.BIDS__BIDS_AUCTIONID_FKEY);

        return _auctions;
    }

    @Override
    public Bids as(String alias) {
        return new Bids(DSL.name(alias), this);
    }

    @Override
    public Bids as(Name alias) {
        return new Bids(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(String name) {
        return new Bids(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(Name name) {
        return new Bids(name, null);
    }
}
