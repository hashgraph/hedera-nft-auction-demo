/*
 * This file is generated by jOOQ.
 */
package com.hedera.demo.auction.app.db.tables;


import com.hedera.demo.auction.app.db.Indexes;
import com.hedera.demo.auction.app.db.Keys;
import com.hedera.demo.auction.app.db.Public;
import com.hedera.demo.auction.app.db.tables.Auctions.AuctionsPath;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Bids extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bids</code>
     */
    public static final Bids BIDS = new Bids();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.bids.timestamp</code>.
     */
    public final TableField<Record, String> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.bids.auctionid</code>.
     */
    public final TableField<Record, Integer> AUCTIONID = createField(DSL.name("auctionid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.bids.bidderaccountid</code>.
     */
    public final TableField<Record, String> BIDDERACCOUNTID = createField(DSL.name("bidderaccountid"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.bidamount</code>.
     */
    public final TableField<Record, Long> BIDAMOUNT = createField(DSL.name("bidamount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bids.status</code>.
     */
    public final TableField<Record, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.refundtxid</code>.
     */
    public final TableField<Record, String> REFUNDTXID = createField(DSL.name("refundtxid"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.refundtxhash</code>.
     */
    public final TableField<Record, String> REFUNDTXHASH = createField(DSL.name("refundtxhash"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.transactionid</code>.
     */
    public final TableField<Record, String> TRANSACTIONID = createField(DSL.name("transactionid"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.transactionhash</code>.
     */
    public final TableField<Record, String> TRANSACTIONHASH = createField(DSL.name("transactionhash"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.refundstatus</code>.
     */
    public final TableField<Record, String> REFUNDSTATUS = createField(DSL.name("refundstatus"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.bids.scheduleid</code>.
     */
    public final TableField<Record, String> SCHEDULEID = createField(DSL.name("scheduleid"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    private Bids(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Bids(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.bids</code> table reference
     */
    public Bids(String alias) {
        this(DSL.name(alias), BIDS);
    }

    /**
     * Create an aliased <code>public.bids</code> table reference
     */
    public Bids(Name alias) {
        this(alias, BIDS);
    }

    /**
     * Create a <code>public.bids</code> table reference
     */
    public Bids() {
        this(DSL.name("bids"), null);
    }

    public <O extends Record> Bids(Table<O> path, ForeignKey<O, Record> childPath, InverseForeignKey<O, Record> parentPath) {
        super(path, childPath, parentPath, BIDS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BidsPath extends Bids implements Path<Record> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BidsPath(Table<O> path, ForeignKey<O, Record> childPath, InverseForeignKey<O, Record> parentPath) {
            super(path, childPath, parentPath);
        }
        private BidsPath(Name alias, Table<Record> aliased) {
            super(alias, aliased);
        }

        @Override
        public BidsPath as(String alias) {
            return new BidsPath(DSL.name(alias), this);
        }

        @Override
        public BidsPath as(Name alias) {
            return new BidsPath(alias, this);
        }

        @Override
        public BidsPath as(Table<?> alias) {
            return new BidsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BIDS_REFUNDSTATUS_INDEX, Indexes.BIDS_TRANSACTIONID_INDEX);
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.BIDS_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.BIDS__BIDS_AUCTIONID_FKEY);
    }

    private transient AuctionsPath _auctions;

    /**
     * Get the implicit join path to the <code>public.auctions</code> table.
     */
    public AuctionsPath auctions() {
        if (_auctions == null)
            _auctions = new AuctionsPath(this, Keys.BIDS__BIDS_AUCTIONID_FKEY, null);

        return _auctions;
    }

    @Override
    public Bids as(String alias) {
        return new Bids(DSL.name(alias), this);
    }

    @Override
    public Bids as(Name alias) {
        return new Bids(alias, this);
    }

    @Override
    public Bids as(Table<?> alias) {
        return new Bids(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(String name) {
        return new Bids(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(Name name) {
        return new Bids(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bids rename(Table<?> name) {
        return new Bids(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids where(Condition condition) {
        return new Bids(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bids where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bids where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bids where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Bids where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Bids whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
