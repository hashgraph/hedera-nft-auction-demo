plugins {
    id 'idea'
    id "nebula.lint" version "20.5.6"
    id 'com.gradleup.shadow' version '8.3.6'
    id "net.ltgt.errorprone" version "4.1.0" apply false
    id "com.github.ben-manes.versions" version "0.52.0" apply false
    id "org.flywaydb.flyway" version "9.22.3"
    id 'nu.studer.jooq' version '10.0'
    id "jacoco"
    id 'java'
}

group = "com.hedera.demo.auction.node"
version = "1.0"
description = "Hederaâ„¢ Hashgraph NFT Auction Appnet Demo"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir('jacoco')
}

jar {
    enabled = false
    manifest {
        attributes 'Main-Class': 'com.hedera.demo.auction.app.App'
    }
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "net.ltgt.errorprone"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "nebula.lint"
apply plugin: "jacoco"
apply plugin: 'application'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'com.gradleup.shadow'

application {
    mainClass = 'com.hedera.demo.auction.app.App'
}

repositories {
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()
}

configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntime.extendsFrom runtimeOnly
    intTestAnnotationProcessor.extendsFrom testAnnotationProcessor

    testSystemImplementation.extendsFrom testImplementation
    testSystemRuntime.extendsFrom runtimeOnly
    testSystemAnnotationProcessor.extendsFrom testAnnotationProcessor
}

dependencies {
    runtimeOnly("org.glassfish.jaxb:jaxb-runtime:4.0.5")
    runtimeOnly("io.vertx:vertx-core:4.5.0")
    implementation 'com.google.guava:guava:33.4.0-jre'
    implementation "jakarta.annotation:jakarta.annotation-api:3.0.0"

    errorprone "com.google.errorprone:error_prone_core:2.36.0"
    errorprone "com.uber.nullaway:nullaway:0.12.4"
    compileOnly "com.google.errorprone:error_prone_annotations:2.36.0"

    def jooqVersion = "3.20.2"
    def vertxVersion = "4.5.13"
    def postgresqlVersion = "42.7.5"
    def jacksonVersion = "2.18.3"
    def junitJupiterVersion = "5.12.1"

    implementation "io.github.cdimascio:java-dotenv:5.2.2"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.hedera.hashgraph:sdk:2.52.0"
    testImplementation "com.hedera.hashgraph:sdk:2.52.0"
    implementation "io.vertx:vertx-web:$vertxVersion"
    runtimeOnly "io.vertx:vertx-pg-client:$vertxVersion"
    implementation "io.vertx:vertx-web-client:$vertxVersion"
    implementation "io.vertx:vertx-web-validation:$vertxVersion"
    implementation "io.github.jklingsporn:vertx-jooq-classic-reactive:6.5.5"
    testImplementation "io.github.jklingsporn:vertx-jooq-classic-reactive:6.5.5"
    implementation "commons-codec:commons-codec:1.18.0"
    implementation "org.apache.logging.log4j:log4j-core:2.24.3"
    implementation "commons-validator:commons-validator:1.9.0"
    implementation "org.yaml:snakeyaml:2.4"
    implementation("com.gradleup.shadow:com.gradleup.shadow.gradle.plugin:8.3.6")

    runtimeOnly "io.grpc:grpc-netty-shaded:1.71.0"
    runtimeOnly "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    runtimeOnly "org.postgresql:postgresql:$postgresqlVersion"

    jooqGenerator "org.postgresql:postgresql:$postgresqlVersion"

    def lombokVersion = "1.18.36"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testSystemRuntime("org.projectlombok:lombok:$lombokVersion")
    testSystemImplementation("org.projectlombok:lombok:$lombokVersion")
    testSystemAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")

    implementation "org.flywaydb:flyway-core:9.22.3"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.platform:junit-platform-launcher:1.12.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"

    testImplementation "io.vertx:vertx-junit5:$vertxVersion"
    testImplementation "io.vertx:vertx-unit:$vertxVersion"

    def testContainersVersion = "1.20.6"
    testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    testImplementation "org.testcontainers:postgresql:$testContainersVersion"

    testImplementation "org.mock-server:mockserver-netty:5.15.0"
    testImplementation "org.mock-server:mockserver-client-java:5.15.0"

    testImplementation "org.awaitility:awaitility:4.3.0"
    testImplementation "org.glassfish:jakarta.json:2.0.1"
    testImplementation "net.joshka:junit-json-params:5.10.2-r0"
    testImplementation "org.slf4j:slf4j-reload4j:2.0.17"
}

sourceSets {
    main {
        java.srcDir('src/main')
        resources.srcDir("src/main/resources")
    }
    test {
        compileClasspath += main.output
        runtimeClasspath += main.output
        java.srcDir('src/test')
        resources.srcDir("src/test/resources")
    }

    integration {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir('src/testIntegration')
        resources.srcDir("src/testIntegration/resources")
    }

    system {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        java.srcDir('src/testSystem')
        resources.srcDir("src/testSystem/resources")
    }
}

gradleLint {
    rules=['unused-dependency']
}

def envFile = file('.env')
def envProps = new Properties()

if (envFile.exists()) {
    envProps.load(new FileInputStream(envFile))
}

envProps.each { key, value ->
    System.setProperty(key, value)
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy  = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.errorprone {
        warn("NullAway")
        option("NullAway:AnnotatedPackages", "com.hedera.demo.auction")
        option("NullAway:TreatGeneratedAsUnannotated", "true")
        allDisabledChecksAsWarnings = true
        disable("Java7ApiChecker")
        disable("Java8ApiChecker")
        disable("AndroidJdkLibsChecker")
        disable("CatchAndPrintStackTrace")
        disable("ThrowSpecificExceptions")
        disable("UnnecessarilyFullyQualified")
        disable("WildcardImport")
        disable("SystemOut")
        disableWarningsInGeneratedCode = true
        excludedPaths = "(.*proto.*)|(.*generated.*)|(.*db.*)"
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    apply plugin: "jacoco"
    failFast = true
    testLogging {
        exceptionFormat = 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    systemProperty "OPERATOR_ID", findProperty("OPERATOR_ID")
    systemProperty "OPERATOR_KEY", findProperty("OPERATOR_KEY")
    systemProperty "CONFIG_FILE", findProperty("CONFIG_FILE")
    systemProperty "HEDERA_NETWORK", findProperty("HEDERA_NETWORK")
}

tasks.register('systemTests', Test) {
    description = 'Runs the system tests.'
    group = 'verification'
    testClassesDirs = sourceSets.system.output.classesDirs
    classpath = sourceSets.system.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

tasks.register('integrationTests', Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

tasks.register('testSystem', Test) {
    description = 'Runs the system tests.'
    group = 'verification'
    testClassesDirs = sourceSets.testSystem.output.classesDirs
    classpath = sourceSets.testSystem.runtimeClasspath
    outputs.upToDateWhen { false }
}

jacocoTestReport {
    executionData fileTree(include: "jacoco/*.exec")
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/com/hedera/demo/auction/app/db/**','**/com/hedera/demo/auction/exerciser/**', '**/com/hedera/demo/auction/test/**'])
        }))
    }
    reports {
        enabled true
        xml.required = true
        html.required = true
        csv.required = false
    }
    dependsOn test
    dependsOn integrationTests
    dependsOn systemTests
}

flyway {
    def dbURL = System.getProperty("DATABASE_URL") ?: "postgresql://localhost:5432/"
    def dbNAME = System.getProperty("POSTGRES_DB") ?: "nftauction"
    def dbUSER = System.getProperty("POSTGRES_USER") ?: "postgres"
    def dbPASS = System.getProperty("POSTGRES_PASSWORD") ?: "postgres"

    url = "jdbc:${dbURL}${dbNAME}"
    user = dbUSER
    password = dbPASS
    locations = ['filesystem:src/main/resources/migrations']
}

jooq {
    configurations {
        main {
            generationTool {
                logging = 'INFO'

                // Use system properties to get the database connection information
                def dbURL = System.getProperty("DATABASE_URL") ?: "postgresql://localhost:5432/"
                def dbSCHEMA = System.getProperty("POSTGRES_DB") ?: "nftauction"
                def dbUSER = System.getProperty("POSTGRES_USER") ?: "postgres"
                def dbPASS = System.getProperty("POSTGRES_PASSWORD") ?: "postgres"

                // Set up the JDBC connection for jOOQ code generation
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = "jdbc:${dbURL}${dbSCHEMA}"
                    user = dbUSER
                    password = dbPASS
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }

                // Configure the generator
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'

                    // Configure the database settings
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'  // Adjust schema if needed
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }

                    // Generate POJOs, DAOs, etc.
                    generate {
                        deprecated = false
                        records = false
                        immutablePojos = true
                        fluentSetters = false
                        interfaces = false
                        pojos = false
                        daos = false
                    }

                    // Define the output location for the generated classes
                    target {
                        packageName = 'com.hedera.demo.auction.app.db'
                        directory = "$projectDir/src/main/java/com/hedera/demo/auction/app/db"
                    }

                    // Define the generation strategy
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
} 

tasks.register('runNode', JavaExec) {
    group = "Execution"
    description = "Runs the application"
    classpath = sourceSets.main.runtimeClasspath
    allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
    mainClass = "com.hedera.demo.auction.app.App"
}


tasks.register('generateKey', JavaExec) {
    group = "Execution"
    description = "Generates a public / private key pair"
    classpath = sourceSets.main.runtimeClasspath
    allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
    mainClass = "com.hedera.demo.auction.app.GenerateKey"
}

tasks.register('generateApiKey', JavaExec) {
    group = "Execution"
    description = "Generates a key for the admin api"
    classpath = sourceSets.main.runtimeClasspath
    allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
    mainClass = "com.hedera.demo.auction.app.GenerateApiKey"
}

tasks.register('setupHelper', JavaExec) {
    group = "Execution"
    description = "Sets up a topic (optional), auction account, token, auction...."
    classpath = sourceSets.main.runtimeClasspath
    allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
    mainClass = "com.hedera.demo.auction.exerciser.SetupHelper"
}

tasks.register('exerciseAuction', JavaExec) {
    group = "Execution"
    description = "Sends bids to an auction"
    classpath = sourceSets.main.runtimeClasspath
    allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
    mainClass = "com.hedera.demo.auction.exerciser.ExerciseAuction"
}

tasks.register('createAccount', JavaExec) {
    group = "Execution"
    description = "Creates an account"
    classpath = sourceSets.main.runtimeClasspath
    allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
    mainClass = "com.hedera.demo.auction.exerciser.CreateAccount"
    args cmdargs.split()
}

tasks.named("shadowJar") {
    archiveBaseName = "hedera-nft-auction-demo-node-$version"
    archiveClassifier = ''
    archiveVersion = ''
}

tasks.named('distZip') {
    dependsOn shadowJar
}

tasks.named('distTar') {
    dependsOn shadowJar
}

tasks.named('startScripts') {
    dependsOn shadowJar
}

tasks.register('testDbConnection') {
    doLast {
        def dbURL = "jdbc:postgresql://localhost:5432/nftauction"
        def dbUser = "postgres"
        def dbPassword = "postgres"
        
        try {
            def conn = DriverManager.getConnection(dbURL, dbUser, dbPassword)
            println "Database connection successful!"
            conn.close()
        } catch (Exception e) {
            println "Failed to connect to the database: ${e.message}"
        }
    }
}
