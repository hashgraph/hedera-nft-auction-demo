import groovy.xml.MarkupBuilder
import org.jooq.codegen.GenerationTool

import javax.xml.bind.JAXB

buildscript {
	repositories {
		gradlePluginPortal()
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "org.glassfish.jaxb:jaxb-runtime:2.3.2"
		classpath "org.postgresql:postgresql:42.2.14"
		classpath "io.github.jklingsporn:vertx-jooq-generate:6.3.0"
		classpath "io.vertx:vertx-core:4.0.3"
	}
}

plugins {
	id 'idea'
	id "nebula.lint" version "16.9.0"
	id 'com.github.johnrengelman.shadow' version '6.0.0' apply false
	id "net.ltgt.errorprone" version "2.0.2" apply false
	id "com.github.ben-manes.versions" version "0.29.0" apply false
	id "org.flywaydb.flyway" version "6.5.5"
	id 'nu.studer.jooq' version '5.2.1'
	id "jacoco"
	id 'java'
//	id 'com.bmuschko.docker-java-application' version '6.7.0'
}

allprojects {
	apply plugin: "java"
	apply plugin: "idea"
	apply plugin: "net.ltgt.errorprone"
	apply plugin: "com.github.ben-manes.versions"
	apply plugin: "nebula.lint"

	gradleLint {
		rules=['unused-dependency']
	}
	sourceCompatibility = 14
	targetCompatibility = 14

	repositories {
		jcenter()
	}

	sourceSets {
		main {
			resources {
				srcDirs "src/main/resources"
			}
		}
		testIntegration {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDir file('src/testIntegration/java')
			}
			resources.srcDir file('src/testIntegration/resources')
		}
		testSystem {
			java {
				compileClasspath += main.output + test.output
				runtimeClasspath += main.output + test.output
				srcDir file('src/testSystem/java')
			}
			resources.srcDir file('src/testSystem/resources')
		}
	}

	idea {
		module {
//			sourceDirs -= file("src/testIntegration/java")
//			testSourceDirs += file("src/testIntegration/java")
//			sourceDirs -= file("src/testSystem/java")
//			testSourceDirs += file("src/testSystem/java")

			scopes.TEST.plus += [ configurations.testIntegrationCompile ]
			scopes.TEST.plus += [ configurations.testSystemCompile ]
		}
	}

	configurations {
		testIntegrationCompile.extendsFrom testImplementation
		testIntegrationRuntime.extendsFrom testRuntimeOnly

		testSystemCompile.extendsFrom testImplementation
		testSystemRuntime.extendsFrom testRuntimeOnly
	}

	dependencies {
		implementation 'com.google.guava:guava:29.0-jre'

		// https://github.com/google/error-prone
		// https://errorprone.info/
		errorprone "com.google.errorprone:error_prone_core:2.4.0"
		compileOnly "com.google.errorprone:error_prone_annotations:2.4.0"

		// https://github.com/uber/NullAway
		errorprone "com.uber.nullaway:nullaway:0.9.1"

		// https://github.com/eclipse-ee4j/common-annotations-api
		implementation "jakarta.annotation:jakarta.annotation-api:2.0.0-RC1"
	}

	jacoco {
		reportsDir = file("$buildDir/jacoco")
		toolVersion = "0.8.5"
	}

	tasks.withType(Test) {
		apply plugin: "jacoco"
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = "UTF-8"

		options.errorprone {
			// https://github.com/uber/NullAway
			warn("NullAway")
			option("NullAway:AnnotatedPackages", "com.hedera.demo.auction")
			option("NullAway:TreatGeneratedAsUnannotated", "true")

			// Enable _all_ error prone checks then selectively disable
			// Checks that are default-disabled are enabled as warnings
			allDisabledChecksAsWarnings = true
			disable("Java7ApiChecker")
			disable("AndroidJdkLibsChecker")
			disable("CatchAndPrintStackTrace")
			disable("ThrowSpecificExceptions")

			// Ignore generated and protobuf code
			disableWarningsInGeneratedCode = true
			excludedPaths = "(.*proto.*)|(.*generated.*)|(.*db.*)"
		}
	}

}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

group = "com.hedera.demo.auction.node"
version = "1.0"
description = "Hederaâ„¢ Hashgraph NFT Auction Appnet Demo"

dependencies {
	implementation "io.github.cdimascio:java-dotenv:5.2.1"
	implementation "com.fasterxml.jackson.core:jackson-annotations:2.12.3"
	runtimeOnly "com.fasterxml.jackson.core:jackson-databind:2.12.3"
	implementation "com.hedera.hashgraph:sdk:2.0.5"

	runtimeOnly 'io.grpc:grpc-netty-shaded:1.35.0'

	def vertxVersion = "4.0.3"
	def jooqVersion = "3.14.11"

	implementation "io.vertx:vertx-web:$vertxVersion"
	implementation "io.vertx:vertx-pg-client:$vertxVersion"
	implementation "io.vertx:vertx-web-client:$vertxVersion"
	implementation "io.github.jklingsporn:vertx-jooq-classic-reactive:5.2.0"
	implementation 'commons-codec:commons-codec:1.9'
	// jOOQ
	implementation "org.jooq:jooq:$jooqVersion"
	runtimeOnly "org.jooq:jooq-meta:$jooqVersion"
	runtimeOnly 'org.postgresql:postgresql:42.2.14'

	// jOOQ database driver
	jooqGenerator 'org.postgresql:postgresql:42.2.14'

	// logging
	implementation 'org.apache.logging.log4j:log4j-core:2.13.2'

	// lombok
	implementation 'org.projectlombok:lombok:1.18.16'
	annotationProcessor 'org.projectlombok:lombok:1.18.16'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
	testSystemAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

	// https://mvnrepository.com/artifact/org.yaml/snakeyaml
	implementation 'org.yaml:snakeyaml:1.29'

	// flyway
	compile "org.flywaydb:flyway-core:7.7.0"

	// Testing
	def junitJupiterVersion = "5.4.2"
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"

	testImplementation "io.vertx:vertx-junit5:$vertxVersion"
	testImplementation "io.vertx:vertx-unit:$vertxVersion"

	def testContainersVersion = "1.15.3"
	testRuntimeOnly "org.testcontainers:testcontainers:$testContainersVersion"
	testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
	testImplementation "org.testcontainers:postgresql:$testContainersVersion"

	def mockServerVersion = "5.11.2"
	testImplementation "org.mock-server:mockserver-netty:$mockServerVersion"
	testImplementation "org.mock-server:mockserver-client-java:$mockServerVersion"

	testImplementation "org.awaitility:awaitility:4.0.3"
	testImplementation "org.glassfish:javax.json:1.1.4"
	testImplementation "net.joshka:junit-json-params:1.1.0"

	testImplementation "org.slf4j:slf4j-log4j12:1.7.28"
}

tasks.withType(Test) {
	useJUnitPlatform()

	// this task will fail on the first failed test
	failFast = true

	// emit logs per passed or failed test
	testLogging {
		exceptionFormat = 'full'
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// propagate system environment to test runner
	systemProperty "OPERATOR_ID", findProperty("OPERATOR_ID")
	systemProperty "OPERATOR_KEY", findProperty("OPERATOR_KEY")
	systemProperty "CONFIG_FILE", findProperty("CONFIG_FILE")
	systemProperty "HEDERA_NETWORK", findProperty("HEDERA_NETWORK")
}

jacocoTestReport {
	// make sure to use any/all test coverage data for the report
	executionData fileTree(dir: buildDir, include: "jacoco/*.exec")

	// remove generated db files from report
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/app/db/**','com.hedera.demo.auction.exerciser/**'])
		}))
	}

	// configure it so only xml is generated for the report
	reports {
		xml.enabled true
		xml.destination file("$buildDir/reports/jacoco/report.xml")
		html.enabled true
		csv.enabled false
	}

	// make sure we run all tests before this report is made
	dependsOn tasks.withType(Test)
}

task testIntegration(type: Test) {
	description = 'Runs the integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.testIntegration.output.classesDirs
	classpath = sourceSets.testIntegration.runtimeClasspath
	outputs.upToDateWhen { false }

	mustRunAfter test
}

check.dependsOn testIntegration

task testSystem(type: Test) {
	description = 'Runs the system tests.'
	group = 'verification'
//	dependsOn 'dockerBuildImage'

	testClassesDirs = sourceSets.testSystem.output.classesDirs
	classpath = sourceSets.testSystem.runtimeClasspath
	outputs.upToDateWhen { false }
}

//docker {
//	println "Building docker image"
//	javaApplication {
//		baseImage = 'adoptopenjdk:14-jre-hotspot'
//		ports = [8081, 8082]
//		images = ["hedera/${rootProject.name}:latest"]
//		mainClassName = "com.hedera.demo.auction.app.App"
//	}
//}

flyway {
	def dbURL = System.getenv("DATABASE_URL") ?: "postgresql://localhost:5432/postgres"
	def dbUSER = System.getenv("DATABASE_USERNAME") ?: "postgres"
	def dbPASS = System.getenv("DATABASE_PASSWORD") ?: "password"

	url = "jdbc:${dbURL}"
	user = "${dbUSER}"
	password = "${dbPASS}"
	locations = ['filesystem:src/main/resources/migrations']
}

task jooqGenerate {

	doLast() {
		def dbURL = System.getenv("DATABASE_URL") ?: "postgresql://localhost:5432/postgres"
		def dbUSER = System.getenv("DATABASE_USERNAME") ?: "postgres"
		def dbPASS = System.getenv("DATABASE_PASSWORD") ?: "password"
		def writer = new StringWriter()

		new MarkupBuilder(writer)
				.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.14.0.xsd') {
					jdbc {
						driver('org.postgresql.Driver')
						url("jdbc:${dbURL}")
						user("${dbUSER}")
						password("${dbPASS}")
					}
					generator {
						name('io.github.jklingsporn.vertx.jooq.generate.classic.ClassicReactiveVertxGenerator')
						database {
							name('org.jooq.meta.postgres.PostgresDatabase')
							inputSchema('public')
						}
						generate([:]) {
							deprecated(false)
							records(false)
							interfaces(false)
							fluentSetters(false)
                            pojos(false)
							daos(false)
						}
						target() {
							packageName('com.hedera.demo.auction.app.db')
							directory("$projectDir/src/main/java")
						}
						strategy {
							name('io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy')
						}
					}
				}

		GenerationTool.generate(
				JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.meta.jaxb.Configuration.class)
		)
	}
}

if (project.hasProperty("args")) {
	ext.cmdargs = project.getProperty("args")
} else {
	ext.cmdargs = ""
}

task runNode(type: JavaExec) {
	group = "Execution"
	description = "Runs the application"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.App"
	args cmdargs.split()
}

task createTopic(type: JavaExec) {
	group = "Execution"
	description = "Creates a topic id and updates the .env file with the result"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.CreateTopic"
	args cmdargs.split()
}

task createAuction(type: JavaExec) {
	group = "Execution"
	description = "Creates an auction from a file which is submitted to a Topic"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.CreateAuction"
	args cmdargs.split()
}

task createAuctionAccount(type: JavaExec) {
	group = "Execution"
	description = "Creates an auction account with threshold keys"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.CreateAuctionAccount"
	args cmdargs.split()
}

task createToken(type: JavaExec) {
	group = "Execution"
	description = "Creates a token"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.CreateToken"
	args cmdargs.split()
}

task createTokenTransfer(type: JavaExec) {
	group = "Execution"
	description = "Creates a token"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.CreateTokenTransfer"
	args cmdargs.split()
}

task easySetup(type: JavaExec) {
	group = "Execution"
	description = "Sets up the demo with default parameters"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.EasySetup"
	args cmdargs.split()
}

task generateKey(type: JavaExec) {
	group = "Execution"
	description = "Generates a public / private key pair"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.GenerateKey"
	args cmdargs.split()
}

task setupHelper(type: JavaExec) {
	group = "Execution"
	description = "Sets up a topic (optional), auction account, token, auction...."
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.exerciser.SetupHelper"
	args cmdargs.split()
}

task exerciseAuction(type: JavaExec) {
	group = "Execution"
	description = "Sends bids to an auction"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.exerciser.ExerciseAuction"
	args cmdargs.split()
}

task createAccount(type: JavaExec) {
	group = "Execution"
	description = "Creates an account"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.exerciser.CreateAccount"
	args cmdargs.split()
}

task manageValidator(type: JavaExec) {
	group = "Execution"
	description = "Manages validator metadata"
	classpath = sourceSets.main.runtimeClasspath
	allJvmArgs = ["-Dlog4j.configurationFile=./log4j2.xml"]
	main = "com.hedera.demo.auction.app.ManageValidator"
	args cmdargs.split()
}

application {
	mainClassName = 'com.hedera.demo.auction.app.App'
}

jar {
	enabled = false
	manifest {
		attributes 'Main-Class': 'com.hedera.demo.auction.app.App'
	}
}

tasks.shadowJar.configure {
	classifier = null
}

tasks.withType(JavaCompile).configureEach {
	options.errorprone {
		disable("DefaultPackage")
	}
}

